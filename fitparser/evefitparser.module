<?php

/**
 * @file
 * Provides an input filter which filters [evefit] fit [/evefit] to an IGB dna fit link.
 */

/**
 * Implements hook_filter_info().
 */
function evefitparser_filter_info() {
  $filters = array();
  $filters['evefitparser'] = array(
    'title' => t('Parse eve fits'),
    'process callback' => '_evefitparser_filter'
  );
  return $filters;
}

/** 
 * Filter callback for our evefitparser filter.
 */
function _evefitparser_filter($text, $filter, $format, $langcode, $cache, $cache_id) {
	$xml = null;
	$starttag = '[evefit]';
	$endtag = '[/evefit]';
	
	$start = false;
	$end = false;
	$offset = 0;
	while(strpos($text, $starttag, $offset) !== false)
	{
		if($xml == null)
		{
			if (file_exists(drupal_get_path('module', 'Evefitparser') . '/itemid.xml')) {
				$xml = simplexml_load_file(drupal_get_path('module', 'Evefitparser') . '/itemid.xml');
			}
		}
		$start = strpos($text, $starttag, $offset);
		$end = strpos($text, $endtag, $offset);
		
		$substart = $start + strlen($starttag);
		$subend = $end - $start - strlen($endtag);
		
		
		$link = _evefitparser_parsefits($text, $substart, $subend, $xml);
		
		$unmodtext = substr($text, $substart, $subend);
		$moddedText = $unmodtext . $link;
		if(!(strpos($unmodtext, $link) !== FALSE))
		{
			$text = substr_replace($text, $moddedText, $substart, $subend);
		}
		$offset = $end + strlen($endtag) + strlen($link);
	}
	
	$text = str_ireplace($starttag, '', $text);
	$text = str_ireplace($endtag, '', $text);
	return $text;
}

function _evefitparser_CorrectItem($itemName)
{
	$ret = $itemName;
	
	if (strpos($itemName, 'Omni-Directional') !== FALSE)
	{
		$ret = str_replace('Omni-Directional','Omnidirectional',$ret);
	}
	
	return ($ret);
}

function _evefitparser_startsWith($haystack, $needle)
{
    return $needle === "" || strpos($haystack, $needle) === 0;
}
function _evefitparser_endsWith($haystack, $needle)
{
    return $needle === "" || substr($haystack, -strlen($needle)) === $needle;
}

function _evefitparser_addToArray($itemid, $array, $amount=1)
{
	if(isset($array[''.$itemid.'']))
	{
		$array[''.$itemid.''] = $array[''.$itemid.''] + $amount;
	}
	else
	{
		$array[''.$itemid.''] = $amount;
	}
	return ($array);
}

function _evefitparser_BuildCache($xml)
{
	$cached_modules = array();
	$versionXpath = $xml->xpath('//eveitemid');
	$versionNode = $versionXpath[0];
	$versionAttributes = $versionNode->attributes();
	
	$cached_modules['xmlversion'] = (string)$versionAttributes['version'];
	
	$items = $xml->xpath('//row');
	foreach($items as $row)
	{
		$attr = $row->attributes();
		$typeID = (string)$row['typeID'];
		$typeName = (string)$row['typeName'];
		$cached_modules[''.$typeName.''] = $typeID;
	}
	cache_set('_evefitparser_cached_modules', $cached_modules, 'cache');
	
	return ($cached_modules);
}

function _evefitparser_GetCached($xml, $name) {
	$ret = 0;
	$cached_modules = &drupal_static(__FUNCTION__);
	if (!isset($cached_modules)) {
		if ($cache = cache_get('_evefitparser_cached_modules')) {
			$cached_modules = $cache->data;
		}
		else {
			$cached_modules = _evefitparser_BuildCache($xml);
		}
	}
	
	$versionXpath = $xml->xpath('//eveitemid');
	$versionNode = $versionXpath[0];
	$versionAttributes = $versionNode->attributes();
	$version = (string)$versionAttributes['version'];
	
	if($version > $cached_modules['xmlversion'])
	{
		cache_clear_all('_evefitparser_cached_modules', 'cache', TRUE); 
		$cached_modules = _evefitparser_BuildCache($xml);
	}
	
	if(isset($cached_modules[$name]))
	{
		$ret = $cached_modules[$name];
	}
	return ($ret);
}

function _evefitparser_GetItemID($xml, $name)
{
	$name = _evefitparser_CorrectItem($name);
	$return = _evefitparser_GetCached($xml, $name);
	return($return);
}

function _evefitparser_parsefits($text, $start, $end, $xml)
{
	$unmodtext = substr($text, $start, $end);
	$prepare_text = str_ireplace('<p>', '<br />', $unmodtext);
	$prepare_text = str_ireplace('</p>', '<br />', $prepare_text);
	
	$fitString = ':';
	$shipid = 0;
	$modulearr = array();
	$unknownModules = array();
	
	$array = explode('<br />', $prepare_text);
	$i = 0;
	foreach($array as $k=>$v)
	{
		$line = trim(strip_tags($v));
		if(strlen($line) == 0)
		{
			continue;
		}
		if($i == 0)
		{
			$stripped = str_replace('[','', $line);
			$stripped = str_replace(']','', $stripped);
			$strarr = explode(',', $stripped);
			$shipid = _evefitparser_GetItemID($xml, trim($strarr[0]));
		}
		else
		{		
			if(_evefitparser_startsWith($line, '['))
			{
				
			}
			else
			{
				$stripped = str_replace('[','', $line);
				$stripped = str_replace(']','', $stripped);
				$strarr = explode(',', $stripped);
				$modid = _evefitparser_GetItemID($xml, trim($strarr[0]));
				$estrarr = explode(' x', $stripped);
				if($modid == 0 && !isset($estrarr[1]))
				{
					if(!isset($estrarr[1]))
					{
						$unknownModules = _evefitparser_addToArray(trim($strarr[0]), $unknownModules);
					}
					continue;
				}
				
				if(isset($estrarr[1]))
				{
					$modid = _evefitparser_GetItemID($xml, trim($estrarr[0]));
					$amount = 1;
					if(isset($estrarr[1]))
					{
						$amount = $estrarr[1];
					}
					$modulearr = _evefitparser_addToArray($modid, $modulearr, $amount);
				}
				else
				{
					$modulearr = _evefitparser_addToArray($modid, $modulearr);
				}
				if(isset($strarr[1]))
				{
					$ammoid = _evefitparser_GetItemID($xml, trim($strarr[1]));
					$modulearr = _evefitparser_addToArray($ammoid, $modulearr);
				}
			}
		}
		$i++;
	}
	
	
	
	if($shipid > 0)
	{
		$mods = '';
		foreach($modulearr as $mod=>$num)
		{
			if($num > 0)
			{
				$mods = $mods . $mod.';'.$num.':';
			}
		}
		$fitString = $shipid .':'. $mods . $fitString;
	}
	$link = "<a href=\"#\" onclick=\"JavaScript:CCPEVE.showFitting('".$fitString."');\">Ingame Fit</a>";
	return ($link);
}

/**
 * Settings form callback for our evefitparser filter.
 */
/*function _evefitparser_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $elements = array();
  $elements['replacement'] = array(
    '#type' => 'textfield',
    '#title' => t('Replacement text '.$m),
    '#default_value' => isset($filter->settings['replacement']) ? $filter->settings['replacement'] :  $defaults['replacement'],
  );
  return $elements;
}*/
